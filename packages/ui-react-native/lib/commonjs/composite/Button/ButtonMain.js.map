{"version":3,"sources":["ButtonMain.tsx"],"names":["ButtonMain","children","color","icon","loading","type","variant","rest"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAYO,MAAMA,UAA+B,GAAG,CAAC;AAC9CC,EAAAA,QAD8C;AAE9CC,EAAAA,KAAK,GAAG,SAFsC;AAG9CC,EAAAA,IAAI,GAAG,IAHuC;AAI9CC,EAAAA,OAJ8C;AAK9CC,EAAAA,IAL8C;AAM9CC,EAAAA,OAAO,GAAG,MANoC;AAO9C,KAAGC;AAP2C,CAAD,KAQxB;AACrB,sBACE,6BAAC,cAAD;AACE,IAAA,EAAE,EAAE,iCAAaF,IAAb,EAAmBH,KAAnB,CADN;AAEE,IAAA,cAAc,EAAC,cAFjB;AAGE,IAAA,aAAa,EAAEE,OAAO,GAAG,MAAH,GAAY,MAHpC;AAIE,IAAA,OAAO,EAAEE;AAJX,KAKMC,IALN,gBAOE,6BAAC,SAAD;AAAK,IAAA,IAAI,EAAE;AAAX,IAPF,EAQGH,OAAO,gBACN,6BAAC,uBAAD;AAAmB,IAAA,KAAK,EAAE,mCAAeC,IAAf,EAAqBH,KAArB,CAA1B;AAAuD,IAAA,IAAI,EAAE;AAA7D,IADM,gBAGN,6BAAC,SAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAc,IAAA,aAAa,EAAC,KAA5B;AAAkC,IAAA,cAAc,EAAC;AAAjD,kBACE,6BAAC,UAAD;AACE,IAAA,KAAK,EAAE,mCAAeG,IAAf,EAAqBH,KAArB,CADT;AAEE,IAAA,aAAa,EAAE,CAFjB;AAGE,IAAA,UAAU,EAAE,KAHd;AAIE,IAAA,OAAO,EAAC;AAJV,KAMGD,QANH,CADF,CAXJ,eAsBE,6BAAC,SAAD;AAAK,IAAA,IAAI,EAAE;AAAX,KACGE,IAAI,IAAI,CAACC,OAAT,iBACC,6BAAC,UAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,EAAE,EAAE,mCAAeC,IAAf,EAAqBH,KAArB,CAFN;AAGE,IAAA,KAAK,EAAE,iCAAaG,IAAb,EAAmBH,KAAnB,CAHT;AAIE,IAAA,IAAI,EAAE,OAAOC,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,aAJ1C;AAKE,IAAA,IAAI,EAAC;AALP,IAFJ,CAtBF,CADF;AAoCD,CA7CM","sourcesContent":["import React, { FC } from 'react'\nimport { ActivityIndicator, Box, PressableProps, Text } from '../../base'\nimport { Button } from '../../base/Button'\nimport { ButtonVariants, Color } from '../../theme'\nimport { Icon, IconName } from '../icon'\nimport { getAccentColor, getBaseColor } from './getColorUtils'\nimport { TypeProp } from './types'\n\nexport type ButtonMainProps = {\n  children: string\n  color: Color\n  icon?: IconName | boolean\n  loading: boolean\n  type: TypeProp\n  variant?: ButtonVariants\n} & PressableProps\n\nexport const ButtonMain: FC<ButtonMainProps> = ({\n  children,\n  color = 'primary',\n  icon = true,\n  loading,\n  type,\n  variant = 'main',\n  ...rest\n}: ButtonMainProps) => {\n  return (\n    <Button\n      bg={getBaseColor(type, color)}\n      justifyContent=\"space-around\"\n      pointerEvents={loading ? 'none' : 'auto'}\n      variant={variant}\n      {...rest}\n    >\n      <Box flex={1} />\n      {loading ? (\n        <ActivityIndicator color={getAccentColor(type, color)} flex={1} />\n      ) : (\n        <Box flex={5} flexDirection=\"row\" justifyContent=\"center\">\n          <Text\n            color={getAccentColor(type, color)}\n            numberOfLines={1}\n            selectable={false}\n            variant=\"buttonTextMain\"\n          >\n            {children}\n          </Text>\n        </Box>\n      )}\n      <Box flex={1}>\n        {icon && !loading && (\n          <Icon\n            isRounded\n            bg={getAccentColor(type, color)}\n            color={getBaseColor(type, color)}\n            name={typeof icon === 'string' ? icon : 'arrow-right'}\n            type=\"svg\"\n          />\n        )}\n      </Box>\n    </Button>\n  )\n}\n"]}