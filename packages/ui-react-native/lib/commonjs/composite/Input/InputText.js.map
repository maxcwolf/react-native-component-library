{"version":3,"sources":["InputText.tsx"],"names":["InputRequired","InputText","label","bottomContent","value","onChangeText","isRequired","isPassword","style","rest","ref","theme","inputValue","setInputValue","isEyeOpen","setIsEyeOpen","handleChange","val","styleTextInput","height","Label","HAIRLINE_WIDTH","colors","inputPlaceholder","marginRight","spacing","m","text"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,aAAa,GAAG,mBACpB,6BAAC,UAAD;AAAM,EAAA,KAAK,EAAC,eAAZ;AAA4B,EAAA,EAAE,EAAC;AAA/B,QACI,GADJ,CADF;;AAoBO,MAAMC,SAAS,gBAAG,uBACvB,CACE;AACEC,EAAAA,KADF;AAEEC,EAAAA,aAFF;AAGEC,EAAAA,KAHF;AAIEC,EAAAA,YAJF;AAKE;AACAC,EAAAA,UAAU,GAAG,KANf;AAOEC,EAAAA,UAAU,GAAG,KAPf;AAQEC,EAAAA,KARF;AASE,KAAGC;AATL,CADF,EAYEC,GAZF,KAaK;AACH,QAAMC,KAAK,GAAG,wBAAd;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B,qBAAST,KAAT,CAApC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4B,qBAASR,UAAT,CAAlC;AAEA,wBAAU,MAAM;AACdM,IAAAA,aAAa,CAACT,KAAD,CAAb;AACD,GAFD,EAEG,CAACA,KAAD,CAFH;;AAIA,QAAMY,YAAY,GAAIC,GAAD,IAAiB;AACpCJ,IAAAA,aAAa,CAACI,GAAD,CAAb;AACAZ,IAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGY,GAAH,CAAZ;AACD,GAHD,CATG,CAcH;;;AACA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,EADa,CACT;;AADS,GAAvB;;AAIA,QAAMC,KAAK,GAAG,mBACZ,6BAAC,UAAD;AAAM,IAAA,aAAa,EAAC,KAApB;AAA0B,IAAA,gBAAgB,EAAC;AAA3C,KACGd,UAAU,iBAAI,6BAAC,aAAD,OADjB,EAEG,OAAOJ,KAAP,KAAiB,QAAjB,gBACC,6BAAC,UAAD;AAAM,IAAA,OAAO,EAAC;AAAd,KAA2BA,KAA3B,CADD,GAGCA,KALJ,CADF;;AAWA,sBACE,6BAAC,UAAD;AACE,IAAA,UAAU,EAAC,QADb;AAEE,IAAA,iBAAiB,EAAEmB,yBAFrB;AAGE,IAAA,WAAW,EAAC,aAHd;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,aAAa,EAAC;AALhB,KAOGnB,KAAK,iBAAI,6BAAC,KAAD,OAPZ,eAQE,6BAAC,UAAD;AAAM,IAAA,IAAI,EAAE,CAAZ;AAAe,IAAA,aAAa,EAAC;AAA7B,kBACE,6BAAC,SAAD;AAAK,IAAA,QAAQ,EAAE;AAAf,kBACE,6BAAC,eAAD;AACE,IAAA,GAAG,EAAEQ,GADP;AAEE,IAAA,EAAE,EAAC;AAFL,KAGMD,IAHN;AAIE,IAAA,oBAAoB,EAAEE,KAAK,CAACW,MAAN,CAAaC,gBAJrC;AAKE,IAAA,eAAe,EAAET,SALnB;AAME,IAAA,KAAK,EAAE,CAACN,KAAD,EAAQU,cAAR,CANT;AAOE,IAAA,KAAK,EAAEN,UAPT;AAQE,IAAA,OAAO,EAAC,WARV;AASE,IAAA,YAAY,EAAEI;AAThB,KADF,CADF,EAcGT,UAAU,iBACT,6BAAC,6BAAD;AACE,IAAA,aAAa,EAAE,GADjB;AAEE,IAAA,KAAK,EAAE;AAAEiB,MAAAA,WAAW,EAAEb,KAAK,CAACc,OAAN,CAAcC;AAA7B,KAFT;AAGE,IAAA,OAAO,EAAE,MAAMX,YAAY,CAAC,CAACD,SAAF;AAH7B,kBAKE,6BAAC,MAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAACW,MAAN,CAAaK,IADtB;AAEE,IAAA,IAAI,EAAEb,SAAS,GAAG,eAAH,GAAqB,KAFtC;AAGE,IAAA,IAAI,EAAC;AAHP,IALF,CAfJ,CARF,EAoCGX,aAAa,iBACZ,6BAAC,SAAD;AAAK,IAAA,WAAW,EAAC;AAAjB,KACG,OAAOA,aAAP,KAAyB,QAAzB,gBACC,6BAAC,UAAD,QAAOA,aAAP,CADD,GAGCA,aAJJ,CArCJ,CADF;AAgDD,CA5FsB,CAAlB","sourcesContent":["import React, { forwardRef, useState, useEffect, ReactNode } from 'react'\nimport { TouchableOpacity } from 'react-native'\nimport { useTheme } from '@shopify/restyle'\nimport { Theme } from '../../theme'\nimport { Box, Flex, Text, TextInput, TextInputProps } from '../../base'\nimport { Icon } from '..'\nimport { HAIRLINE_WIDTH } from '../../helpers/constants'\n\nconst InputRequired = () => (\n  <Text color=\"inputRequired\" pt=\"s\">\n    *{' '}\n  </Text>\n)\n\nexport interface InputTextProps\n  extends Omit<\n    TextInputProps,\n    'placeholderTextColor' | 'onChange' | 'onChangeText'\n  > {\n  label?: ReactNode\n  isPassword?: boolean // TODO: Add password `| 'password'`\n  bottomContent?: ReactNode\n  value?: string\n  onChangeText?: (value: string) => void\n  isRequired?: boolean\n  onClear?: () => void\n}\n\nexport const InputText = forwardRef<typeof TextInput, InputTextProps>(\n  (\n    {\n      label,\n      bottomContent,\n      value,\n      onChangeText,\n      // onClear, TODO: Add onClear usage\n      isRequired = false,\n      isPassword = false,\n      style,\n      ...rest\n    },\n    ref,\n  ) => {\n    const theme = useTheme<Theme>()\n    const [inputValue, setInputValue] = useState(value)\n    const [isEyeOpen, setIsEyeOpen] = useState(isPassword)\n\n    useEffect(() => {\n      setInputValue(value)\n    }, [value])\n\n    const handleChange = (val: string) => {\n      setInputValue(val)\n      onChangeText?.(val)\n    }\n\n    // TODO: remove this and refactor\n    const styleTextInput = {\n      height: 40, // TODO: Use Theme\n    }\n\n    const Label = () => (\n      <Flex flexDirection=\"row\" marginHorizontal=\"s\">\n        {isRequired && <InputRequired />}\n        {typeof label === 'string' ? (\n          <Text variant=\"formLabel\">{label}</Text>\n        ) : (\n          label\n        )}\n      </Flex>\n    )\n\n    return (\n      <Flex\n        alignItems=\"center\"\n        borderBottomWidth={HAIRLINE_WIDTH}\n        borderColor=\"inputBorder\"\n        borderRadius=\"base\"\n        flexDirection=\"row\"\n      >\n        {label && <Label />}\n        <Flex flex={1} flexDirection=\"row\">\n          <Box flexGrow={1}>\n            <TextInput\n              ref={ref}\n              pl=\"xs\"\n              {...rest}\n              placeholderTextColor={theme.colors.inputPlaceholder}\n              secureTextEntry={isEyeOpen}\n              style={[style, styleTextInput]}\n              value={inputValue}\n              variant=\"formValue\"\n              onChangeText={handleChange}\n            />\n          </Box>\n          {isPassword && (\n            <TouchableOpacity\n              activeOpacity={0.8}\n              style={{ marginRight: theme.spacing.m }}\n              onPress={() => setIsEyeOpen(!isEyeOpen)}\n            >\n              <Icon\n                color={theme.colors.text}\n                name={isEyeOpen ? 'eye-with-line' : 'eye'}\n                type=\"entypo\"\n              />\n            </TouchableOpacity>\n          )}\n        </Flex>\n        {bottomContent && (\n          <Box marginRight=\"m\">\n            {typeof bottomContent === 'string' ? (\n              <Text>{bottomContent}</Text>\n            ) : (\n              bottomContent\n            )}\n          </Box>\n        )}\n      </Flex>\n    )\n  },\n)\n"]}