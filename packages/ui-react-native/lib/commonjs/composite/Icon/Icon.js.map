{"version":3,"sources":["Icon.tsx"],"names":["Icon","props","theme","type","name","size","borderRadii","icon","color","colors","black","bg","transparent","onPress","onLongPress","isDisabled","isRounded","ratio","styles","StyleSheet","create","container","backgroundColor","width","height","justifyContent","alignItems","touchable","rounded","borderRadius","disabled","opacity","IconComponent"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;AAeA;AACA;AACA;AAEO,MAAMA,IAAmB,GAAIC,KAAD,IAAW;AAC5C,QAAMC,KAAK,GAAG,wBAAd;AAEA,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,IAAI,GAAGH,KAAK,CAACI,WAAN,CAAkBC,IAAlB,GAAyB,CAH5B;AAIJC,IAAAA,KAAK,GAAGN,KAAK,CAACO,MAAN,CAAaC,KAJjB;AAKJC,IAAAA,EAAE,GAAGT,KAAK,CAACO,MAAN,CAAaG,WALd;AAMJC,IAAAA,OANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,UAAU,GAAG,KART;AASJC,IAAAA,SAAS,GAAG,KATR;AAUJC,IAAAA,KAAK,GAAG;AAVJ,MAWFhB,KAXJ;;AAaA,QAAMiB,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,IAAAA,SAAS,EAAE;AACTC,MAAAA,eAAe,EAAEpB,KAAK,CAACO,MAAN,CAAaE,EAAb,CADR;AAETY,MAAAA,KAAK,EAAElB,IAAI,GAAGY,KAFL;AAGTO,MAAAA,MAAM,EAAEnB,IAAI,GAAGY,KAHN;AAITQ,MAAAA,cAAc,EAAE,QAJP;AAKTC,MAAAA,UAAU,EAAE;AALH,KADoB;AAQ/BC,IAAAA,SAAS,EAAE;AACTJ,MAAAA,KAAK,EAAElB,IAAI,GAAGY,KADL;AAETO,MAAAA,MAAM,EAAEnB,IAAI,GAAGY,KAFN;AAGTQ,MAAAA,cAAc,EAAE,QAHP;AAITC,MAAAA,UAAU,EAAE;AAJH,KARoB;AAc/BE,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAGxB,IAAI,GAAGY,KAAR,GAAiB;AADxB,KAdsB;AAiB/Ba,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE;AADD;AAjBqB,GAAlB,CAAf;;AAsBA,QAAMC,aAAa,GAAG,4BAAiB7B,IAAjB,CAAtB;AACA,sBACE,6BAAC,UAAD;AACE,IAAA,KAAK,EAAE,CACLe,MAAM,CAACG,SADF,EAELL,SAAS,IAAIE,MAAM,CAACU,OAFf,EAGLb,UAAU,IAAIG,MAAM,CAACY,QAHhB;AADT,KAOGjB,OAAO,gBACN,6BAAC,6BAAD;AAEIA,IAAAA,OAFJ;AAGIC,IAAAA,WAHJ;AAIIC,IAAAA,UAJJ;AAME,IAAA,KAAK,EAAE,CAACG,MAAM,CAACS,SAAR,EAAmBX,SAAS,IAAIE,MAAM,CAACU,OAAvC;AANT,kBAQE,6BAAC,aAAD;AAEIxB,IAAAA,IAFJ;AAGIC,IAAAA,IAHJ;AAIIG,IAAAA,KAAK,EAAEN,KAAK,CAACO,MAAN,CAAaD,KAAb;AAJX,IARF,CADM,gBAkBN,6BAAC,aAAD;AAEIJ,IAAAA,IAFJ;AAGIC,IAAAA,IAHJ;AAIIG,IAAAA,KAAK,EAAEN,KAAK,CAACO,MAAN,CAAaD,KAAb;AAJX,IAzBJ,CADF;AAoCD,CA3EM","sourcesContent":["import React, { FC } from 'react'\nimport { StyleSheet, TouchableOpacity } from 'react-native'\nimport { useTheme } from '@shopify/restyle'\nimport { Theme } from '../../theme'\nimport { getIconComponent, IconType, IconName } from '../../helpers/icon'\nimport { Flex } from '../../base'\nexport type { IconName }\nexport interface IconProps {\n  name: IconName\n  size?: number\n  color?: string\n  bg?: string\n  type?: IconType\n  onPress?: () => void\n  onLongPress?: () => void\n  isDisabled?: boolean\n  isRounded?: boolean\n  ratio?: number\n}\n\n/**\n * @todo Export all possible icon name values and types.\n */\n\nexport const Icon: FC<IconProps> = (props) => {\n  const theme = useTheme<Theme>()\n\n  const {\n    type,\n    name,\n    size = theme.borderRadii.icon * 2,\n    color = theme.colors.black,\n    bg = theme.colors.transparent,\n    onPress,\n    onLongPress,\n    isDisabled = false,\n    isRounded = false,\n    ratio = 1.5,\n  } = props\n\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: theme.colors[bg],\n      width: size * ratio,\n      height: size * ratio,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    touchable: {\n      width: size * ratio,\n      height: size * ratio,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    rounded: {\n      borderRadius: (size * ratio) / 2,\n    },\n    disabled: {\n      opacity: 0.3,\n    },\n  })\n\n  const IconComponent = getIconComponent(type)\n  return (\n    <Flex\n      style={[\n        styles.container,\n        isRounded && styles.rounded,\n        isDisabled && styles.disabled,\n      ]}\n    >\n      {onPress ? (\n        <TouchableOpacity\n          {...{\n            onPress,\n            onLongPress,\n            isDisabled,\n          }}\n          style={[styles.touchable, isRounded && styles.rounded]}\n        >\n          <IconComponent\n            {...{\n              name,\n              size,\n              color: theme.colors[color],\n            }}\n          />\n        </TouchableOpacity>\n      ) : (\n        <IconComponent\n          {...{\n            name,\n            size,\n            color: theme.colors[color],\n          }}\n        />\n      )}\n    </Flex>\n  )\n}\n"]}